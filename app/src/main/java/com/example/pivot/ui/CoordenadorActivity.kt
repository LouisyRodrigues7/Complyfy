package com.example.pivot.ui

import android.content.Intent
import android.graphics.Typeface
import android.os.Bundle
import android.util.Log
import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.Toolbar
import androidx.core.content.ContextCompat
import androidx.viewpager2.widget.ViewPager2
import com.example.pivot.*
import com.example.pivot.data.DatabaseHelper
import com.example.pivot.editarpilar.EditarActivity
import com.example.pivot.fragmentpilares.MeusPilaresFragment
import com.example.pivot.fragmentpilares.TodosPilaresFragment
import com.example.pivot.fragmentpilares.ViewPagerAdapter
import com.example.pivot.novopilar.NovoPilarActivity
import com.getkeepsafe.taptargetview.TapTarget
import com.getkeepsafe.taptargetview.TapTargetSequence
import com.google.android.material.tabs.TabLayout
import com.google.android.material.tabs.TabLayoutMediator
import android.view.ViewGroup


/**
 * Tela principal exibida para usu√°rios do tipo "Coordenador e Apoio".
 *
 * Essa activity gerencia o painel com abas ("Meus Pilares", "Todos os Pilares"),
 * bot√µes de cria√ß√£o, edi√ß√£o, gr√°ficos e notifica√ß√µes, al√©m de um tour interativo.
 * Os pilares representam elementos do planejamento estrat√©gico, com a√ß√µes e atividades vinculadas.
 */
class CoordenadorActivity : AppCompatActivity() {

    /** Caixa de texto para cria√ß√£o de novo pilar (tooltip visual) */
    private lateinit var caixaCriarPilar: TextView

    /** Caixa de texto para edi√ß√£o de pilar existente (tooltip visual) */
    private lateinit var caixaEditarPilar: TextView

    /**
     * Inicializa os elementos da tela, configura o ViewPager, Toolbar e a√ß√µes dos bot√µes.
     */
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_coordenador)

        val toolbar = findViewById<Toolbar>(R.id.toolbar)
        val btnAjuda = findViewById<ImageView>(R.id.btnAjuda)
        val btnAddPilar = findViewById<ImageView?>(R.id.btnAddPilar)
        val tabLayout = findViewById<TabLayout>(R.id.tabLayout)
        val viewPager = findViewById<ViewPager2>(R.id.viewPager)

        val nomeUsuario = intent.getStringExtra("NOME_USUARIO")
        val idUsuario = intent.getIntExtra("ID_USUARIO", -1)
        val tipoUsuario = intent.getStringExtra("TIPO_USUARIO")

        toolbar.title = "Ol√°, $nomeUsuario"
        setSupportActionBar(toolbar)

        val adapter = ViewPagerAdapter(this).apply {
            addFragment(MeusPilaresFragment(), "Meus Pilares")
            addFragment(TodosPilaresFragment(), "Todos os Pilares")
        }
        viewPager.adapter = adapter

        val paginaHome = intent.getIntExtra("PAGINA_HOME", 0)
        viewPager.setCurrentItem(paginaHome, false)

        TabLayoutMediator(tabLayout, viewPager) { tab, position ->
            tab.text = adapter.getPageTitle(position)
        }.attach()

        // Inicia sequ√™ncia de tour guiado explicando funcionalidades visuais
        btnAjuda.setOnClickListener {
            val tab0View = tabLayout.getTabAt(0)?.view
            val tab1View = tabLayout.getTabAt(1)?.view

            val targets = mutableListOf<TapTarget>()

            // S√≥ adiciona se btnAddPilar estiver vis√≠vel (n√£o Apoio)
            if (btnAddPilar.visibility == View.VISIBLE) {
                targets.add(
                    TapTarget.forView(btnAddPilar, "Criar/Editar Pilar", "Toque aqui para criar ou editar pilares do seu planejamento.")
                        .outerCircleColorInt(ContextCompat.getColor(this, R.color.purple_500))
                        .targetCircleColorInt(ContextCompat.getColor(this, android.R.color.white))
                        .titleTextColorInt(ContextCompat.getColor(this, android.R.color.white))
                        .descriptionTextColorInt(ContextCompat.getColor(this, android.R.color.white))
                        .textTypeface(Typeface.SANS_SERIF)
                        .dimColorInt(ContextCompat.getColor(this, android.R.color.black))
                        .drawShadow(true)
                        .cancelable(true)
                )
            }

            if (tab0View != null) {
                targets.add(
                    TapTarget.forView(tab0View, "Meus Pilares", "Mostra s√≥ os pilares que voc√™ tem atividades como respons√°vel.")
                        .outerCircleColorInt(ContextCompat.getColor(this, R.color.teal_200))
                        .targetCircleColorInt(ContextCompat.getColor(this, android.R.color.white))
                        .titleTextColorInt(ContextCompat.getColor(this, android.R.color.white))
                        .descriptionTextColorInt(ContextCompat.getColor(this, android.R.color.white))
                        .drawShadow(true)
                        .cancelable(true)
                )
            }

            if (tab1View != null) {
                targets.add(
                    TapTarget.forView(tab1View, "Todos os Pilares", "Lista todos os pilares do sistema com suas a√ß√µes e atividades.")
                        .outerCircleColorInt(ContextCompat.getColor(this, R.color.teal_700))
                        .targetCircleColorInt(ContextCompat.getColor(this, android.R.color.white))
                        .titleTextColorInt(ContextCompat.getColor(this, android.R.color.white))
                        .descriptionTextColorInt(ContextCompat.getColor(this, android.R.color.white))
                        .drawShadow(true)
                        .cancelable(true)
                )
            }

            targets.add(
                TapTarget.forView(viewPager, "Pilares e Atividades", "Aqui est√£o os pilares com a√ß√µes e atividades do seu planejamento.")
                    .outerCircleColorInt(ContextCompat.getColor(this, R.color.teal_800))
                    .targetCircleColorInt(ContextCompat.getColor(this, android.R.color.white))
                    .titleTextColorInt(ContextCompat.getColor(this, android.R.color.white))
                    .descriptionTextColorInt(ContextCompat.getColor(this, android.R.color.white))
                    .drawShadow(true)
                    .cancelable(true)
            )

            TapTargetSequence(this)
                .targets(targets)
                .listener(object : TapTargetSequence.Listener {
                    override fun onSequenceFinish() {
                        Toast.makeText(this@CoordenadorActivity, "Tour finalizado üéâ", Toast.LENGTH_SHORT).show()
                    }

                    override fun onSequenceStep(lastTarget: TapTarget, targetClicked: Boolean) {}

                    override fun onSequenceCanceled(lastTarget: TapTarget) {
                        Toast.makeText(this@CoordenadorActivity, "Tour cancelado ‚ùå", Toast.LENGTH_SHORT).show()
                    }
                })
                .start()
        }



        caixaCriarPilar = findViewById(R.id.caixaCriarPilar)
        caixaEditarPilar = findViewById(R.id.caixaEditarPilar)

        // Se o usu√°rio for "Apoio", ele n√£o pode adicionar pilares
        if (tipoUsuario == "Apoio") {
            btnAddPilar.visibility = View.GONE
        }

        // Alterna visibilidade das op√ß√µes "Criar" e "Editar" ao clicar no bot√£o "+"
        btnAddPilar.setOnClickListener {
            toggleCaixaCriarPilar()
            toggleCaixaEditarPilar()
        }

        caixaCriarPilar.setOnClickListener {
            startActivity(Intent(this, NovoPilarActivity::class.java))
        }

        caixaEditarPilar.setOnClickListener {
            startActivity(Intent(this, EditarActivity::class.java))
        }

        val btnGraficos = findViewById<ImageView>(R.id.btnGraficos)
        btnGraficos.setOnClickListener {
            if (tipoUsuario != null && nomeUsuario != null && idUsuario != -1) {
                Intent(this, GraficosActivity::class.java).apply {
                    putExtra("TIPO_USUARIO", tipoUsuario)
                    putExtra("ID_USUARIO", idUsuario)
                    putExtra("NOME_USUARIO", nomeUsuario)
                    startActivity(this)
                }
            } else {
                Toast.makeText(this, "Dados do usu√°rio ausentes. N√£o foi poss√≠vel abrir os gr√°ficos.", Toast.LENGTH_LONG).show()
            }
        }

        val btnNotificacoes = findViewById<ImageView>(R.id.btnNotificacoes)
        btnNotificacoes.setOnClickListener {
            Intent(this, NotificacoesActivity::class.java).apply {
                putExtra("TIPO_USUARIO", tipoUsuario)
                putExtra("ID_USUARIO", idUsuario)
                putExtra("NOME_USUARIO", nomeUsuario)
                startActivity(this)
            }
        }

        val btnLogout = findViewById<ImageView>(R.id.btnAcoes)
        btnLogout.setOnClickListener {
            realizarLogout()
        }

        val btnHome = findViewById<ImageView>(R.id.btnHome)
        btnHome.setOnClickListener {
            com.example.pivot.utils.NavigationUtils.irParaTelaHome(
                this,
                tipoUsuario,
                idUsuario,
                nomeUsuario
            )
        }

        // Executa verifica√ß√µes autom√°ticas de status dos pilares e atividades
        val db = DatabaseHelper(this)
        db.verificarPilaresProximosDaConclusao()
        db.verificarAtividadesProximasDaConclusao()
        db.verificarAtividadesAtrasadas()

        val testeatrasadas = db.buscarAtividadePorStatus()
        Log.d("atrasadas", testeatrasadas.toString())
    }

    /**
     * Retorna o usu√°rio √† tela de login e limpa a pilha de activities.
     */
    private fun realizarLogout() {
        val intent = Intent(this, LoginActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        }
        startActivity(intent)
        finish()
    }

    /**
     * Sempre que a activity √© retomada, as caixas de a√ß√£o s√£o ocultadas.
     */
    override fun onResume() {
        super.onResume()
        caixaCriarPilar.visibility = View.GONE
        caixaEditarPilar.visibility = View.GONE
    }

    /** Alterna visibilidade da caixa de cria√ß√£o de pilar */
    private fun toggleCaixaCriarPilar() {
        caixaCriarPilar.visibility =
            if (caixaCriarPilar.visibility == View.GONE) View.VISIBLE else View.GONE
    }

    /** Alterna visibilidade da caixa de edi√ß√£o de pilar */
    private fun toggleCaixaEditarPilar() {
        caixaEditarPilar.visibility =
            if (caixaEditarPilar.visibility == View.GONE) View.VISIBLE else View.GONE
    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return super.onOptionsItemSelected(item)
    }
}
